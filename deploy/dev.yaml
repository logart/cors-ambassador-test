apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: authservices.getambassador.io
spec:
  group: getambassador.io
  version: v1
  versions:
    - name: v1
      served: true
      storage: true
  scope: Namespaced
  names:
    plural: authservices
    singular: authservice
    kind: AuthService
    categories:
      - ambassador-crds
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: consulresolvers.getambassador.io
spec:
  group: getambassador.io
  version: v1
  versions:
    - name: v1
      served: true
      storage: true
  scope: Namespaced
  names:
    plural: consulresolvers
    singular: consulresolver
    kind: ConsulResolver
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: kubernetesendpointresolvers.getambassador.io
spec:
  group: getambassador.io
  version: v1
  versions:
    - name: v1
      served: true
      storage: true
  scope: Namespaced
  names:
    plural: kubernetesendpointresolvers
    singular: kubernetesendpointresolver
    kind: KubernetesEndpointResolver
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: kubernetesserviceresolvers.getambassador.io
spec:
  group: getambassador.io
  version: v1
  versions:
    - name: v1
      served: true
      storage: true
  scope: Namespaced
  names:
    plural: kubernetesserviceresolvers
    singular: kubernetesserviceresolver
    kind: KubernetesServiceResolver
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: mappings.getambassador.io
spec:
  group: getambassador.io
  version: v1
  versions:
    - name: v1
      served: true
      storage: true
  scope: Namespaced
  names:
    plural: mappings
    singular: mapping
    kind: Mapping
    categories:
      - ambassador-crds
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: modules.getambassador.io
spec:
  group: getambassador.io
  version: v1
  versions:
    - name: v1
      served: true
      storage: true
  scope: Namespaced
  names:
    plural: modules
    singular: module
    kind: Module
    categories:
      - ambassador-crds
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: ratelimitservices.getambassador.io
spec:
  group: getambassador.io
  version: v1
  versions:
    - name: v1
      served: true
      storage: true
  scope: Namespaced
  names:
    plural: ratelimitservices
    singular: ratelimitservice
    kind: RateLimitService
    categories:
      - ambassador-crds
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: tcpmappings.getambassador.io
spec:
  group: getambassador.io
  version: v1
  versions:
    - name: v1
      served: true
      storage: true
  scope: Namespaced
  names:
    plural: tcpmappings
    singular: tcpmapping
    kind: TCPMapping
    categories:
      - ambassador-crds
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: tlscontexts.getambassador.io
spec:
  group: getambassador.io
  version: v1
  versions:
    - name: v1
      served: true
      storage: true
  scope: Namespaced
  names:
    plural: tlscontexts
    singular: tlscontext
    kind: TLSContext
    categories:
      - ambassador-crds
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: tracingservices.getambassador.io
spec:
  group: getambassador.io
  version: v1
  versions:
    - name: v1
      served: true
      storage: true
  scope: Namespaced
  names:
    plural: tracingservices
    singular: tracingservice
    kind: TracingService
    categories:
      - ambassador-crds
---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: ambassador-admin
  name: ambassador-admin
  namespace: dev
spec:
  type: NodePort
  ports:
    - name: ambassador-admin
      port: 80
      targetPort: http-admin
  selector:
    app: ambassador
---
apiVersion: getambassador.io/v1
kind:  Module
metadata:
  name:  ambassador
  namespace: dev
spec:
  config:
    cors:
      origins: http://foo.example
      methods:
        - GET
        - POST
        - OPTIONS
      headers: "Content-Type"
      credentials: false
      exposed_headers: X-Custom-Header
      max_age: "86400"
---
apiVersion: v1
kind: Service
metadata:
  name: ambassador
  namespace: dev
spec:
  type: NodePort
  ports:
    - name: http
      port: 8080
      targetPort: http
  selector:
    app: ambassador
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ambassador
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ambassador
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
        "consul.hashicorp.com/connect-inject": "false"
      labels:
        app: ambassador
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: ambassador
                topologyKey: kubernetes.io/hostname
      serviceAccountName: ambassador
      containers:
        - name: ambassador
          image: quay.io/datawire/ambassador:0.82.0
          resources:
            limits:
              cpu: 1
              memory: 400Mi
            requests:
              cpu: 200m
              memory: 100Mi
          env:
            - name: AMBASSADOR_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: AMBASSADOR_SINGLE_NAMESPACE
              value: "true"
            - name: STATSD_ENABLED
              value: "true"
            - name: STATSD_HOST
              value: localhost
          ports:
            - name: http
              containerPort: 8080
            - name: https
              containerPort: 8443
            - name: http-admin
              containerPort: 8877
          livenessProbe:
            httpGet:
              path: /ambassador/v0/check_alive
              port: 8877
            initialDelaySeconds: 30
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /ambassador/v0/check_ready
              port: 8877
            initialDelaySeconds: 30
            periodSeconds: 3
      restartPolicy: Always
      securityContext:
        runAsUser: 8888
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ambassador
  namespace: dev
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ambassador
  namespace: dev
rules:
  - apiGroups: [""]
    resources: [ "endpoints", "namespaces", "secrets", "services", "configmaps" ]
    verbs: ["get", "list", "watch","create", "update", "patch"]
  - apiGroups: [ "getambassador.io" ]
    resources: [ "*" ]
    verbs: ["get", "list", "watch"]
  - apiGroups: [ "apiextensions.k8s.io" ]
    resources: [ "customresourcedefinitions" ]
    verbs: ["get", "list", "watch"]
  - apiGroups: [ "networking.internal.knative.dev" ]
    resources: [ "clusteringresses", "ingresses" ]
    verbs: ["get", "list", "watch"]
  - apiGroups: [ "networking.internal.knative.dev" ]
    resources: [ "ingresses/status", "clusteringresses/status" ]
    verbs: ["update"]
  - apiGroups: [ "extensions" ]
    resources: [ "ingresses" ]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ambassador
  namespace: dev
subjects:
  - kind: ServiceAccount
    name: ambassador
    namespace: dev
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ambassador
---
apiVersion: getambassador.io/v1
kind:  Mapping
metadata:
  name: my-boot-service
  namespace: dev
spec:
  prefix: /api/service
  rewrite: /api/
  service: my-boot-service
  timeout_ms: 10000
---
apiVersion: v1
kind: Service
metadata:
  name: my-boot-service
  namespace: dev
  labels:
    type: spring
spec:
  selector:
    app: my-boot-service
  ports:
    - name: http
      port: 80
      targetPort: http
    - name: http-management
      port: 9090
      targetPort: http-management
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-boot-service
  namespace: dev
  labels:
    type: spring
  annotations:
    "sidecar.jaegertracing.io/inject": "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-boot-service
  template:
    metadata:
      labels:
        app: my-boot-service
    spec:
      containers:
        - name: my-boot-service
          image: logart/cors:v2
          ports:
            - containerPort: 8585
              name: http
              protocol: TCP
            - containerPort: 9090
              name: http-management
              protocol: TCP
          resources:
            requests:
              cpu: 100m
              memory: 2Gi
            limits:
              cpu: 4
              memory: 6Gi
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 20
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
          lifecycle:
            preStop:
              exec:
                command:
                  - wget
                  - --header
                  - 'Content-Type: application/json'
                  - --post-data={}
                  - http://localhost:9090/actuator/shutdown
